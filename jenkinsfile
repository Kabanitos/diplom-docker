pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'docker.io'
        IMG_NAME = 'cabanitos/mynginx'
        KUBECONFIGID = 'kubeconfig'
        DOCKERID = 'dockerhub-cabanitos'
        GIT_TAG = sh(script: "git describe --tags --exact-match", returnStdout: true).trim()
    }

    stages {
        stage('Checkout') { 
            steps {
                checkout scm
            }
        }


        stage('Fetch Tags') {
            steps {
                sh 'git fetch --tags origin'
            }
        }
        
        stage('Detect TAG') {
            steps{
                script {
                    try { 
                        env.GIT_TAG = sh(script: "git describe --tags --exact-match", returnStdout: true).trim()
                        env.IS_TAG = true
                    }
                    catch (Exception e) {
                        env.IS_TAG = "false"
                    }
                }
            }
        }
        
        stage('Docker login') {
            steps{
                echo "==========Docker Login================="
                withCredentials([usernamePassword(credentialsId: "${DOCKERID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        docker login -u \$USERNAME -p \$PASSWORD
                    """
                }
            }
        }

        stage('Docker build') {
            steps{
                echo "==========Docker build================="
                script {
                    def DOCKER_HUB_TAG = env.IS_TAG == "true" ? env.GIT_TAG : "latest"
                    docker.build("${env.IMG_NAME}:${DOCKER_HUB_TAG}")
                } 
            }
        }

        stage('Docker push') {
            steps{
                echo "==========Docker push================="
                script {
                    def DOCKER_HUB_TAG = env.IS_TAG == "true" ? env.GIT_TAG : "latest"
                    docker.image("${env.IMG_NAME}:${DOCKER_HUB_TAG}").push()
                }
                               

            }
        }
          stage('Deploy to Kubernetes') {
            when {
                expression { env.IS_TAG == "true" }
            }
            steps {
                echo "===============Kubernetes config=============="
                script {
                    withKubeConfig([credentialsId: "${KUBECONFIGID}"]) {
                        sh """
                             kubectl apply -f deployment.yml
                        """
                    }
                }
            }
        }
    }
}
