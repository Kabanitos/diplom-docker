pipeline {
    agent any
    environment {
        IMAGE_NAME = "cabanitos/mynginx"
        KUBECONFIGID = "kubeconfig"

    }
    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }


        #stage("get tag") {
        #    steps {
        #       script {
        #            latestTag = sh(returnStdout: true, script: "git describe --tags").trim()
         #       }
          #      echo "latestTag=$latestTag"
           # }
        #}
        stage("Get Git Tag") {
          steps {
             script {
                 try {
                    GIT_TAG = sh(script: "git describe --tags --exact-match", returnStdout: true).trim()
                        echo "✅ Found exact tag: ${GIT_TAG}"
                    } catch (Exception e) {
                        echo "⚠️ No exact tag found, using 'latest'"
                        env.GIT_TAG = "latest"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir ('.') {
                	sh """
                    docker build -t ${IMAGE_NAME}:${latestTag} . 
                    """
                }
            }
        }
    
        stage('Push to Docker Registry') {
            steps {
                withCredentials([usernamePassword( credentialsId: 'dockerhub-cabanitos', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        docker login -u \$USERNAME -p \$PASSWORD
                        docker push ${IMAGE_NAME}:${latestTag}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: "${env.KUBECONFIGID}", variable: 'KUBECONFIGID')]) {
                    sh """
                        export KUBECONFIG=$KUBECONFIGID
                        kubectl apply -f deployment.yaml
                    """
                }
            }
        }
    }
}
